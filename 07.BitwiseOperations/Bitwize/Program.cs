using System;

namespace Bitwize
{
    class Program
    {
        static void Main(string[] args)
        {
            // operator  | | | |  & & & &  ^ ^ ^ ^
            //------------------------------------
            // operand1  0 0 1 1  0 0 0 1  0 0 1 1
            // operand2  0 1 0 1  0 1 0 1  0 1 0 1
            // result    0 1 1 1  0 0 1 1  0 1 1 0
            //====================================
            // ~ NOT   5 = 0101 
            //         ~
            // RESULT ~5 = 1010
            //=================
            // & AND   5 = 0101
            //       &
            //         3 = 0011
            //-----------------
            // RESULT    = 0001
            //=================
            // | OR    5 = 0101
            //       | 
            //         3 = 0011
            //-----------------
            // RESULT    = 0111
            //=================
            // ^ XOR   5 = 0101
            //       ^
            //         3 = 0011
            //-----------------
            // RESULT    = 0110
            //=================
            // SHIFT  LEFT  <<
            // SHIFT  RIGHT >>
            //=================================================================================
            // How to get the last bit from number "n"                          lastBit = n & 1 
            //
            // N = 125   =>  01111101
            //              &
            // mask = 1  =>  00000001
            // N & mask  =>  00000001
            //==================================================================================
            // How to get the bit at position "p" from a number "n"           bit = (n >> p) & 1
            // 
            // N = 125   =>  01111101
            // P = 5            
            // N >> P    =>  00000011 = 3 IN BIN
            // 3 & 1     =>  00000001 = 1
            //==================================================================================
            // How to set the bit at diven position "p" to 0 or 1     n = n & ~(1 << p)|(b << p)
            //
            // p = 5             => fifth pos.              p = 5                 => fifth pos.
            // n = 125           => 01"0"11101              n = 125               => 01"1"11101
            // mask = ~(1 << p)  => 11"0"11111              mask = ~(1 << p)      => 11"0"11111
            // result = n & mask => 01"0"11101              result = n & mask     => 01"1"11101
        }
    }
}
